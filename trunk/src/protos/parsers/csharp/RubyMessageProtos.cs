// Generated by the protocol buffer compiler.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Nohros.Ruby {
  
  public static partial class RubyMessageProtos {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_nohros_ruby_RubyMessagePacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Nohros.Ruby.RubyMessagePacket, global::Nohros.Ruby.RubyMessagePacket.Builder> internal__static_nohros_ruby_RubyMessagePacket__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static RubyMessageProtos() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChJydWJ5X21lc3NhZ2UucHJvdG8SC25vaHJvcy5ydWJ5GiRnb29nbGUvcHJv" + 
          "dG9idWYvY3NoYXJwX29wdGlvbnMucHJvdG8iOQoRUnVieU1lc3NhZ2VQYWNr" + 
          "ZXQSDwoHbWVzc2FnZRgBIAEoCRITCgtwYXJzZXJfdHlwZRgCIAEoCUIlSAHC" + 
          "PiAKC05vaHJvcy5SdWJ5EhFSdWJ5TWVzc2FnZVByb3Rvcw==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_nohros_ruby_RubyMessagePacket__Descriptor = Descriptor.MessageTypes[0];
        internal__static_nohros_ruby_RubyMessagePacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Nohros.Ruby.RubyMessagePacket, global::Nohros.Ruby.RubyMessagePacket.Builder>(internal__static_nohros_ruby_RubyMessagePacket__Descriptor,
                new string[] { "Message", "ParserType", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class RubyMessagePacket : pb::GeneratedMessage<RubyMessagePacket, RubyMessagePacket.Builder> {
    private static readonly RubyMessagePacket defaultInstance = new Builder().BuildPartial();
    public static RubyMessagePacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RubyMessagePacket DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override RubyMessagePacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Nohros.Ruby.RubyMessageProtos.internal__static_nohros_ruby_RubyMessagePacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RubyMessagePacket, RubyMessagePacket.Builder> InternalFieldAccessors {
      get { return global::Nohros.Ruby.RubyMessageProtos.internal__static_nohros_ruby_RubyMessagePacket__FieldAccessorTable; }
    }
    
    public const int MessageFieldNumber = 1;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public const int ParserTypeFieldNumber = 2;
    private bool hasParserType;
    private string parserType_ = "";
    public bool HasParserType {
      get { return hasParserType; }
    }
    public string ParserType {
      get { return parserType_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasMessage) {
        output.WriteString(1, Message);
      }
      if (HasParserType) {
        output.WriteString(2, ParserType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Message);
        }
        if (HasParserType) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ParserType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RubyMessagePacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RubyMessagePacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RubyMessagePacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RubyMessagePacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RubyMessagePacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RubyMessagePacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RubyMessagePacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RubyMessagePacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RubyMessagePacket ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RubyMessagePacket ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RubyMessagePacket prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<RubyMessagePacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      RubyMessagePacket result = new RubyMessagePacket();
      
      protected override RubyMessagePacket MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new RubyMessagePacket();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Nohros.Ruby.RubyMessagePacket.Descriptor; }
      }
      
      public override RubyMessagePacket DefaultInstanceForType {
        get { return global::Nohros.Ruby.RubyMessagePacket.DefaultInstance; }
      }
      
      public override RubyMessagePacket BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        RubyMessagePacket returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RubyMessagePacket) {
          return MergeFrom((RubyMessagePacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RubyMessagePacket other) {
        if (other == global::Nohros.Ruby.RubyMessagePacket.DefaultInstance) return this;
        if (other.HasMessage) {
          Message = other.Message;
        }
        if (other.HasParserType) {
          ParserType = other.ParserType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Message = input.ReadString();
              break;
            }
            case 18: {
              ParserType = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasMessage {
        get { return result.HasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
      
      public bool HasParserType {
        get { return result.HasParserType; }
      }
      public string ParserType {
        get { return result.ParserType; }
        set { SetParserType(value); }
      }
      public Builder SetParserType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasParserType = true;
        result.parserType_ = value;
        return this;
      }
      public Builder ClearParserType() {
        result.hasParserType = false;
        result.parserType_ = "";
        return this;
      }
    }
    static RubyMessagePacket() {
      object.ReferenceEquals(global::Nohros.Ruby.RubyMessageProtos.Descriptor, null);
    }
  }
  
  #endregion
  
}
