// Copyright (c) 2011 Nohros Inc. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.

//import "google/protobuf/csharp_options.proto";
//option (google.protobuf.csharp_file_options).namespace = "Nohros.Ruby.Logging";

import "common.proto";

package ruby.logging;
option optimize_for = LITE_RUNTIME;

enum LoggingMessageType {
  // A message used to publish and/or store a logging message.
  kLogMessage = 1;
  
  // Messages used to manipulate the storage repository used to store the log
  // messages.
  kStorageInfo = 2;
}

// The format of the log message that is sent to the subscribers.
// Message UUID(msguuid): cfa950a0ca0611e19b230800200c9a66
//
// Protocol
//  RubyMessage.Type = [LoggingMessageType.kLogMessage]
//  RubyMessage.Token = [node-announce]
message LogMessage {
  // The level of the logging event. Could be any string that is relevant for
  // the application, but is usually one of the following:
  //  * DEBUG
  //  * INFO
  //  * WARN
  //  * ERROR
  optional string level = 1;
  
  // The unix time representing the date and time the event was logged.
  optional sint64 time_stamp = 2;

  // The ID of the application associated with this log message. This is usually
  // set to [MACHINE-NAME].[PROGRAM-NAME], but could be anything that identifies
  // the application.
  optional string application = 3;
  
  // The name of the user associated with the log. It could be anything that
  // identifies the user associated with the log message. For example: The name
  // of the user that is running the application, the user account associated
  // with the machine or the machine name where the application is running.
  optional string user = 4;

  // The log message as supplied by the user.
  optional string reason = 5;
  
  // A collection of key value pairs that is used to categorize the log. For
  // example: object=input, action=created, status=success.
  repeated ruby.KeyValuePair categorization = 6;
  
  // Metadata messages contains metadata about log messages(such as control
  // messages). It is used to instruct the logger service about what to do with
  // the message (publish it, store it, etc).
  message Metadata {
    optional bool publish = 1 [default = true];
    optional bool store = 2 [default = true];
  }
  optional Metadata medatata = 7;
}

// A message used to manipulate the storage for a specific application. The
// default storage has the same name of the application, and no limits on the
// number of messages that can be stored.
message StorageInfo {
  // The ID of the application associated with this message.
  optional string application = 1;
  
  // The name of the storage to associate with the application. Every log
  // message sent from the application [application] will be stored in a storage
  // that is identified by the value of this field.
  optional string name = 2;  
 
  // Specifies the maximum number of log messages the storage shall store. Once
  // the space is fully utilized, newly added messages should replace the oldest
  // messages in the storage. If this value is zero the storage should not
  // limit on number of log messages that should be stored. There is no
  // guarantee that this feature is implemented by the currently used storage
  // mechaninsm.
  optional int32 size = 3;
}