// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Nohros.Ruby {
  
  namespace Proto {
    
    public static partial class RubyMessagePacket {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_nohros_ruby_RubyMessagePacket__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Nohros.Ruby.RubyMessagePacket, global::Nohros.Ruby.RubyMessagePacket.Builder> internal__static_nohros_ruby_RubyMessagePacket__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static RubyMessagePacket() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChlydWJ5X21lc3NhZ2VfcGFja2V0LnByb3RvEgtub2hyb3MucnVieRokZ29v" + 
            "Z2xlL3Byb3RvYnVmL2NzaGFycF9vcHRpb25zLnByb3RvImoKEVJ1YnlNZXNz" + 
            "YWdlUGFja2V0EgwKBHNpemUYASABKAUSCgoCaWQYAiABKAUSFAoMc2Vydmlj" + 
            "ZV9uYW1lGAMgASgJEhQKDG1lc3NhZ2VfdHlwZRgEIAEoCRIPCgdtZXNzYWdl" + 
            "GAUgASgJQhJIAcI+DQoLTm9ocm9zLlJ1Ynk=");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_nohros_ruby_RubyMessagePacket__Descriptor = Descriptor.MessageTypes[0];
          internal__static_nohros_ruby_RubyMessagePacket__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Nohros.Ruby.RubyMessagePacket, global::Nohros.Ruby.RubyMessagePacket.Builder>(internal__static_nohros_ruby_RubyMessagePacket__Descriptor,
                  new string[] { "Size", "Id", "ServiceName", "MessageType", "Message", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  public sealed partial class RubyMessagePacket : pb::GeneratedMessage<RubyMessagePacket, RubyMessagePacket.Builder> {
    private static readonly RubyMessagePacket defaultInstance = new Builder().BuildPartial();
    public static RubyMessagePacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RubyMessagePacket DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override RubyMessagePacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Nohros.Ruby.Proto.RubyMessagePacket.internal__static_nohros_ruby_RubyMessagePacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RubyMessagePacket, RubyMessagePacket.Builder> InternalFieldAccessors {
      get { return global::Nohros.Ruby.Proto.RubyMessagePacket.internal__static_nohros_ruby_RubyMessagePacket__FieldAccessorTable; }
    }
    
    public const int SizeFieldNumber = 1;
    private bool hasSize;
    private int size_ = 0;
    public bool HasSize {
      get { return hasSize; }
    }
    public int Size {
      get { return size_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private int id_ = 0;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int ServiceNameFieldNumber = 3;
    private bool hasServiceName;
    private string serviceName_ = "";
    public bool HasServiceName {
      get { return hasServiceName; }
    }
    public string ServiceName {
      get { return serviceName_; }
    }
    
    public const int MessageTypeFieldNumber = 4;
    private bool hasMessageType;
    private string messageType_ = "";
    public bool HasMessageType {
      get { return hasMessageType; }
    }
    public string MessageType {
      get { return messageType_; }
    }
    
    public const int MessageFieldNumber = 5;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSize) {
        output.WriteInt32(1, Size);
      }
      if (HasId) {
        output.WriteInt32(2, Id);
      }
      if (HasServiceName) {
        output.WriteString(3, ServiceName);
      }
      if (HasMessageType) {
        output.WriteString(4, MessageType);
      }
      if (HasMessage) {
        output.WriteString(5, Message);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Size);
        }
        if (HasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Id);
        }
        if (HasServiceName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ServiceName);
        }
        if (HasMessageType) {
          size += pb::CodedOutputStream.ComputeStringSize(4, MessageType);
        }
        if (HasMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Message);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RubyMessagePacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RubyMessagePacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RubyMessagePacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RubyMessagePacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RubyMessagePacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RubyMessagePacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RubyMessagePacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RubyMessagePacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RubyMessagePacket ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RubyMessagePacket ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RubyMessagePacket prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<RubyMessagePacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      RubyMessagePacket result = new RubyMessagePacket();
      
      protected override RubyMessagePacket MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new RubyMessagePacket();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Nohros.Ruby.RubyMessagePacket.Descriptor; }
      }
      
      public override RubyMessagePacket DefaultInstanceForType {
        get { return global::Nohros.Ruby.RubyMessagePacket.DefaultInstance; }
      }
      
      public override RubyMessagePacket BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        RubyMessagePacket returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RubyMessagePacket) {
          return MergeFrom((RubyMessagePacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RubyMessagePacket other) {
        if (other == global::Nohros.Ruby.RubyMessagePacket.DefaultInstance) return this;
        if (other.HasSize) {
          Size = other.Size;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasServiceName) {
          ServiceName = other.ServiceName;
        }
        if (other.HasMessageType) {
          MessageType = other.MessageType;
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Size = input.ReadInt32();
              break;
            }
            case 16: {
              Id = input.ReadInt32();
              break;
            }
            case 26: {
              ServiceName = input.ReadString();
              break;
            }
            case 34: {
              MessageType = input.ReadString();
              break;
            }
            case 42: {
              Message = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasSize {
        get { return result.HasSize; }
      }
      public int Size {
        get { return result.Size; }
        set { SetSize(value); }
      }
      public Builder SetSize(int value) {
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder ClearSize() {
        result.hasSize = false;
        result.size_ = 0;
        return this;
      }
      
      public bool HasId {
        get { return result.HasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasServiceName {
        get { return result.HasServiceName; }
      }
      public string ServiceName {
        get { return result.ServiceName; }
        set { SetServiceName(value); }
      }
      public Builder SetServiceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasServiceName = true;
        result.serviceName_ = value;
        return this;
      }
      public Builder ClearServiceName() {
        result.hasServiceName = false;
        result.serviceName_ = "";
        return this;
      }
      
      public bool HasMessageType {
        get { return result.HasMessageType; }
      }
      public string MessageType {
        get { return result.MessageType; }
        set { SetMessageType(value); }
      }
      public Builder SetMessageType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMessageType = true;
        result.messageType_ = value;
        return this;
      }
      public Builder ClearMessageType() {
        result.hasMessageType = false;
        result.messageType_ = "";
        return this;
      }
      
      public bool HasMessage {
        get { return result.HasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
    }
    static RubyMessagePacket() {
      object.ReferenceEquals(global::Nohros.Ruby.Proto.RubyMessagePacket.Descriptor, null);
    }
  }
  
  #endregion
  
}
