<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nohros.rubynet</name>
    </assembly>
    <members>
        <member name="T:Nohros.Ruby.Service.Net.EmptyServiceHost">
            <summary>
            This class is used to avoid the return of null when a IRubyServiceHost object is needed. It does
            nothing and acts like a mock.
            </summary>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.EmptyServiceHost.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Ruby.Service.Net.EmptyServiceHost"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.EmptyServiceHost.SendMessage(Nohros.Ruby.IRubyMessagePacket)">
            <summary>
            Sends a message to the ruby server.
            </summary>
            <returns>true if the message is succesfully send; otherwise, false.</returns>
            <remarks>
            This service host is fake, so this method alwyas returns false.
            </remarks>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.EmptyServiceHost.StartService">
            <summary>
            Starts the service.
            </summary>
            <remarks>This service does nothing so it can not be started.Calling this method does not
            produces any effect.</remarks>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.EmptyServiceHost.StopService">
            <summary>
            Stops the service.
            </summary>
            <remarks>This service does nothing so it can not be started and cannot be stopped. Calling this
            method does not produces any effect.</remarks>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.EmptyServiceHost.Service">
            <summary>
            Gets a reference to the running service.
            </summary>
            <remarks>The runing service is a instance of the <see cref="!:"/></remarks>
        </member>
        <member name="T:Nohros.Ruby.RubyMessagePacket">
            <summary>
            Provides implementation of the interface <see cref="T:Nohros.Ruby.IRubyMessagePacket"/> for the class <see cref="T:Nohros.Ruby.RubyMessagePacket"/>
            </summary>
            <remarks>
            All the ruby messages must implements the interface <see cref="T:Nohros.Ruby.IRubyMessagePacket"/>. The code of the
            class <see cref="T:Nohros.Ruby.RubyMessagePacket"/> was partially generated from the protocol buffer compiler.
            </remarks>
        </member>
        <member name="T:Nohros.Ruby.Service.Net.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.Resources.log_assembly_not_found">
            <summary>
              Looks up a localized string similar to Could not find a assembly at the path: {0}.
            </summary>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.Resources.log_irubyservice_constructor_error">
            <summary>
              Looks up a localized string similar to An instance of the {0} type could not be created. Check the constructor implied by the IRubyService interface..
            </summary>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.Resources.log_irubyservice_load_error">
            <summary>
              Looks up a localized string similar to The type {0} could not be loaded or it does implements the [Nohros.Ruby.IRubyService interface].
            </summary>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.Resources.log_max_number_services">
            <summary>
              Looks up a localized string similar to The system has rached the maximum number of threads allowed to run simultaneously..
            </summary>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.Resources.log_shell_start_required_args">
            <summary>
              Looks up a localized string similar to One of the required arguments was not supplied..
            </summary>
        </member>
        <member name="F:Nohros.Ruby.Service.Net.RubyNet.logger">
            <summary>
            The main application logger.
            </summary>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.RubyNet.OnUnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Logs all the application unhandled exceptions.
            </summary>
            <param name="sender">The source of the unhandled exception event.</param>
            <param name="e">An <see cref="T:System.UnhandledExceptionEventArgs"/> that contains the event data.</param>
            <remarks>The behavior of the service hosted by us, is not over our control. There is no way
            to prevents the application from shutting down, but we can log it. We do it here.</remarks>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.RubyNet.LOG_ERROR(System.String)">
            <summary>
            Custom wrapper aroung logger.Error();
            </summary>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.RubyNet.LOG_ERROR(System.String,System.Exception)">
            <summary>
            Custom wrapper aroung logger.Error();
            </summary>
        </member>
        <member name="F:Nohros.Ruby.Service.Net.CommandType.Unknown">
            <summary>
            An command that is not recognized.
            </summary>
        </member>
        <member name="F:Nohros.Ruby.Service.Net.CommandType.Start">
            <summary>
            Command used to starts a service.
            </summary>
        </member>
        <member name="F:Nohros.Ruby.Service.Net.CommandType.Stop">
            <summary>
            Command used to stops a service.
            </summary>
        </member>
        <member name="F:Nohros.Ruby.Service.Net.CommandType.Send">
            <summary>
            Command used to send a message to a service.
            </summary>
        </member>
        <member name="F:Nohros.Ruby.Service.Net.CommandType.Exit">
            <summary>
            Command used to close the command line language interpreter(shell).
            </summary>
        </member>
        <member name="F:Nohros.Ruby.Service.Net.CommandType.Help">
            <summary>
            Shows the help text of a given command.
            </summary>
        </member>
        <member name="T:Nohros.Ruby.Service.Net.StartCommand">
            <summary>
            A command that is used to starts a service.
            </summary>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.StartCommand.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a nes instance of the <see cref="T:Nohros.Ruby.Service.Net.StartCommand"/> by using the specified command name
            and command line.
            </summary>
            <param name="service_class_type"></param>
            <param name="pipe_channel_name">The name of the IPC channel that will be used to handle the
            server communication.</param>
            <param name="service_command_line">A string that is passed to the hosted service and acts like a
            start-up a command line.</param>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.StartCommand.FromCommandLine(Nohros.Desktop.CommandLine)">
            <summary>
            Constructs a new instance of the <see cref="T:Nohros.Ruby.Service.Net.StartCommand"/> by using the specified
            <see cref="T:Nohros.Desktop.CommandLine"/> object.
            </summary>
            <param name="command_line">A <see cref="T:Nohros.Desktop.CommandLine"/> object representing the command line
            string that was typed into the shell console.</param>
            <remarks>
            The main reasons that causes a service to not runs are:
            <list type="bullet">
            <item>The specified assembly does not exists physically.</item>
            <item>The specified type could not be loaded.</item>
            <item>The specifid class type could does not implements the <see cref="T:Nohros.Ruby.IRubyService"/> interface.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.StartCommand.StartService(System.Boolean)">
            <summary>
            Host and runs a service.
            </summary>
            <param name="delay_start">true to not start the service and transfer this responsability to the caller;
            otherwise, false.</param>
            <returns>An <see cref="T:Nohros.Ruby.IRubyServiceHost"/> object repreenting the running service.</returns>
            <remarks>
            If the hosted service throws an exception, it will be propagated to the caller.
            <para>
            If the parameter <paramref name="delay_start"/> is true the service will not be started, the caller
            should be call the <see cref="M:Nohros.Ruby.IRubyServiceHost.StartService"/>method of the returned object in order to
            starts the service.
            </para>
            </remarks>
        </member>
        <member name="T:Nohros.Ruby.Service.Net.RubyNetServiceHost">
            <summary>
            .NET implementation of the <see cref="T:Nohros.Ruby.IRubyServiceHost"/>. This class is used to host
            .NET based ruby services.
            </summary>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.RubyNetServiceHost.#ctor(Nohros.Ruby.IRubyService,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Ruby.Service.Net.RubyNetServiceHost"/> by using the specified
            service and IPC channel name.
            </summary>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.RubyNetServiceHost.StartService">
            <summary>
            Starts the hosted service.
            </summary>
            <remarks>
            <para>The hosted service runs into a dedicated thread. The thread where this code is running is
            used to send/receive messages to/from the service.</para>
            <para>This method does not return until the running hosted service have finished your execution.</para>
            <para>If the service throws any exception this is propaggated to the caller and the status
            of service is changed to stopped.</para>
            </remarks>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.RubyNetServiceHost.StopService">
            <summary>
            Stops the hosted service.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.RubyNetServiceHost.ConnectPipe(System.String)">
            <summary>
            Connects to a named pipe whose name is <paramref name="pipe_name"/>
            </summary>
            <param name="pipe_name">The name of the pipe to connects.</param>
            <returns>true if the connection is successfull; otherwise, false.</returns>
            <remarks>The communication between the service agent and the service host is done through
            a named pipe. The communication link could be estabilished/desestablished at any time. This is done
            by the special named-pipe</remarks>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.RubyNetServiceHost.MessageHandler(System.IAsyncResult)">
            <summary>
            Handle service messages sent from the Ruby Service Host.
            </summary>
            <remarks>
            The ruby agent communicates with the service host through a named pipe. Each service host must create a 
            pipe with the name that was specified by the ruby agent service and wait for the connection of the agent.
            <para>
            This method receives a message from the ruby server, parse it, packet it into a new <see cref="T:Nohros.Ruby.IRubyService"/>
            object and send it to the hosted service.
            </para>
            </remarks>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.RubyNetServiceHost.Service">
            <inherithdoc/>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.RubyNetShell.#ctor">
            <summary>
            Initializes a nes instance of the <see cref="T:Nohros.Ruby.Service.Net.RubyNetShell"/>.
            </summary>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.RubyNetShell.StartAndExit(Nohros.Desktop.CommandLine)">
            <summary>
            Starts a service and terminates the application when the service finish.
            </summary>
            <param name="command_line"></param>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.RubyNetShell.Start">
            <summary>
            Starts the command line shell.
            </summary>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.RubyNetShell.ParseCommand(System.String,Nohros.Desktop.CommandLine)">
            <summary>
            Parses a command.
            </summary>
            <param name="command">The lowercase version of the command name.</param>
            <param name="command_line">The command line string representing the specified command
            name and its related arguments.</param>
            <returns>The type of the command.</returns>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.RubyNetShell.NextStringMatch(System.String,System.String)">
            <summary>
            Checks if a given string matches another string.
            </summary>
            <param name="str">The string to compare.</param>
            <param name="match">The string to match.</param>
            <returns></returns>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.RubyNetShell.StartService(Nohros.Ruby.Service.Net.StartCommand)">
            <summary>
            Executes the specified start service command.
            </summary>
            <param name="command">The service command containing the</param>
            <remarks>
            The start command will start a new service into a dedicated thread. The dedicated thread
            will be a foreground thread, so we can force it to shutdown and avoid application hangs.
            </remarks>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.AsyncPipeState.#ctor(System.IO.Pipes.NamedPipeClientStream,Nohros.Ruby.IRubyService)">
            <summary>
            Initializes a new instance of the <see cref="!:AsyncPipeResult"/> by using the specified
            <see cref="T:System.IO.Pipes.NamedPipeClientStream"/> and <see cref="T:Nohros.Ruby.IRubyService"/>.
            </summary>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.AsyncPipeState.Message">
            <summary>
            Gets an byte array containing the message sent from the ruby agent service.
            </summary>
            <value>A byte array where the data sent from the agent service agent will be read into.</value>
            <remarks>This property will be used by the named pipe to read data into.</remarks>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.AsyncPipeState.PipeStream">
            <summary>
            Gets the pipe related with the asynchronous operation.
            </summary>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.AsyncPipeState.RubyService">
            <summary>
            Gets the service related with the asynchronous operation.
            </summary>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.UnknownCommand.#ctor">
            <summary>
            Initializes a nes instance of the <see cref="T:Nohros.Ruby.Service.Net.UnknownCommand"/> by using the specified command name
            and command line.
            </summary>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.UnknownCommand.Execute">
            <summary>
            Executes the command.
            </summary>
            <remarks>
            This class is used like a place holder, so this command does nothing.
            </remarks>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.UnknownCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
            <remarks>
            The name of the command that this class represents is "unknown".
            </remarks>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.HelpCommand.#ctor(Nohros.Desktop.CommandLine,log4net.ILog)">
            <summary>
            Initializes a nes instance of the <see cref="T:Nohros.Ruby.Service.Net.HelpCommand"/> by using the specified command name
            and command line.
            </summary>
            <param name="name">The name of the command.</param>
            <param name="command_line">A <see cref="T:Nohros.Desktop.CommandLine"/> object representing the command line string
            that was typed into the shell.</param>
            <seealso cref="T:Nohros.Desktop.CommandLine"/>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.SendCommand.#ctor(Nohros.Desktop.CommandLine,log4net.ILog)">
            <summary>
            Initializes a nes instance of the <see cref="T:Nohros.Ruby.Service.Net.SendCommand"/> by using the specified command name
            and command line.
            </summary>
            <param name="name">The name of the command.</param>
            <param name="command_line">A <see cref="T:Nohros.Desktop.CommandLine"/> object representing the command line string
            that was typed into the shell.</param>
            <seealso cref="T:Nohros.Desktop.CommandLine"/>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.StopCommand.#ctor(Nohros.Desktop.CommandLine,log4net.ILog)">
            <summary>
            Initializes a nes instance of the <see cref="T:Nohros.Ruby.Service.Net.StopCommand"/> by using the specified command name
            and command line.
            </summary>
            <param name="name">The name of the command.</param>
            <param name="command_line">A <see cref="T:Nohros.Desktop.CommandLine"/> object representing the command line string
            that was typed into the shell.</param>
            <seealso cref="T:Nohros.Desktop.CommandLine"/>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.EmptyService.#ctor(System.String)">
            <summary>
            Initializes a new instance of the service.
            </summary>
            <param name="command_line">A string representing the service command line.</param>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.EmptyService.Run">
            <summary>
            Starts the service.
            </summary>
            <remarks>This service do nothing and this function has no meaning.</remarks>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.EmptyService.Stop">
            <summary>
            Stops the running service.
            </summary>
            <remarks>This service do nothing and this function has no meaning.</remarks>
        </member>
        <member name="M:Nohros.Ruby.Service.Net.EmptyService.OnServerMessage(Nohros.Ruby.IRubyMessagePacket)">
            <summary>
            Stops the running service.
            </summary>
            <remarks>This service do nothing, so this function always returns false.</remarks>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.EmptyService.Name">
            <summary>
            Gets the name of the service.
            </summary>
        </member>
        <member name="P:Nohros.Ruby.Service.Net.EmptyService.Status">
            <summary>
            Gets the current service state.
            </summary>
            <remarks>
            This service do nothing, so the service status is always stopped.
            </remarks>
        </member>
    </members>
</doc>
